
type Apartment {
  id: ID!
  name: String!
  description: String!
  street: String!
  streetNo: Int!
  postalCode: String
  city: String!
  apartmentNo: Int
  price: Float
  capacity: Int
  images: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelApartmentConnection {
  items: [Apartment]!
  nextToken: String
}

input ModelApartmentFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  street: ModelStringInput
  streetNo: ModelIntInput
  postalCode: ModelStringInput
  city: ModelStringInput
  apartmentNo: ModelIntInput
  price: ModelFloatInput
  capacity: ModelIntInput
  images: ModelStringInput
  and: [ModelApartmentFilterInput]
  or: [ModelApartmentFilterInput]
  not: ModelApartmentFilterInput
}

type Query {
  getApartment(id: ID!): Apartment
  listApartments(filter: ModelApartmentFilterInput, limit: Int, nextToken: String): ModelApartmentConnection
}

input ModelApartmentConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  street: ModelStringInput
  streetNo: ModelIntInput
  postalCode: ModelStringInput
  city: ModelStringInput
  apartmentNo: ModelIntInput
  price: ModelFloatInput
  capacity: ModelIntInput
  images: ModelStringInput
  and: [ModelApartmentConditionInput]
  or: [ModelApartmentConditionInput]
  not: ModelApartmentConditionInput
}

input CreateApartmentInput {
  id: ID
  name: String!
  description: String!
  street: String!
  streetNo: Int!
  postalCode: String
  city: String!
  apartmentNo: Int
  price: Float
  capacity: Int
  images: [String]
}

input UpdateApartmentInput {
  id: ID!
  name: String
  description: String
  street: String
  streetNo: Int
  postalCode: String
  city: String
  apartmentNo: Int
  price: Float
  capacity: Int
  images: [String]
}

input DeleteApartmentInput {
  id: ID!
}

type Mutation {
  createApartment(input: CreateApartmentInput!, condition: ModelApartmentConditionInput): Apartment
  updateApartment(input: UpdateApartmentInput!, condition: ModelApartmentConditionInput): Apartment
  deleteApartment(input: DeleteApartmentInput!, condition: ModelApartmentConditionInput): Apartment
}

input ModelSubscriptionApartmentFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  street: ModelSubscriptionStringInput
  streetNo: ModelSubscriptionIntInput
  postalCode: ModelSubscriptionStringInput
  city: ModelSubscriptionStringInput
  apartmentNo: ModelSubscriptionIntInput
  price: ModelSubscriptionFloatInput
  capacity: ModelSubscriptionIntInput
  images: ModelSubscriptionStringInput
  and: [ModelSubscriptionApartmentFilterInput]
  or: [ModelSubscriptionApartmentFilterInput]
}

type Subscription {
  onCreateApartment(filter: ModelSubscriptionApartmentFilterInput): Apartment @aws_subscribe(mutations: ["createApartment"])
  onUpdateApartment(filter: ModelSubscriptionApartmentFilterInput): Apartment @aws_subscribe(mutations: ["updateApartment"])
  onDeleteApartment(filter: ModelSubscriptionApartmentFilterInput): Apartment @aws_subscribe(mutations: ["deleteApartment"])
}

